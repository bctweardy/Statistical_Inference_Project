ci =0
above <- ci - avgdif * sqrt(n) / qt(quantile, df = n - 1)
above
nx = 10
ny = 10
y = 3
yv = .6
x = 5
xv = .68
quant = .975
res <- sqrt(((nx - 1) * xv + sqrt(ny - 1) * yv)/(nx + ny - 2))
res
cii <- y - x + c(-1, 1) * qt(quant, df = ny + nx - 2) * (res^2) * ((1 / nx) + (1 / ny)) ^ .5
cii
n <- 9
mn <- 1100
sd <- 30
quantile = .975
confid <- mn + c(-1, 1) * qt(quantile, df = n - 1) * sd / sqrt(n)
confid
avgdif = -2
ci =0
above <- ci - avgdif * sqrt(n) / qt(quantile, df = n - 1)
above
nx = 10
ny = 10
y = 3
yv = .6
x = 5
xv = .68
quant = .975
res <- sqrt(((nx - 1) * xv + sqrt(ny - 1) * yv)/(nx + ny - 2))
res
cii <- y - x + c(-1, 1) * qt(quant, df = ny + nx - 2) * ((res)^2) * ((1 / nx) + (1 / ny)) ^ .5
cii
cii <- y - x + c(-1, 1) * qt(quant, df = ny + nx - 2) * res * (1 / nx + 1 / ny) ^ .5
cii
res <- sqrt(((nx - 1) * xv + (ny - 1) * yv)/(nx + ny - 2))
res
cii <- y - x + c(-1, 1) * qt(quant, df = ny + nx - 2) * res * (1 / nx + 1 / ny) ^ .5
cii
nx = 100
ny = 100
y = 4
yv = .5
x = 6
xv = 2
quant = .975
res <- sqrt(((nx - 1) * xv + (ny - 1) * yv)/(nx + ny - 2))
res
cii <- y - x + c(-1, 1) * qt(quant, df = ny + nx - 2) * res * (1 / nx + 1 / ny) ^ .5
cii
cii <- x - y + c(-1, 1) * qnorm(quant) * res * (1 / nx + 1 / ny) ^ .5
cii
res <- sqrt(((nx - 1) * xv^2 + (ny - 1) * yv^2)/(nx + ny - 2))
res
cii <- x - y + c(-1, 1) * qnorm(quant) * res * (1 / nx + 1 / ny) ^ .5
cii
yt = 9
yv = -3
ysd = 1.5
xp = 9
xv = 1
xsd = 1.8
quantil = .90
result <- sqrt(((xp -1) * xsd ^ 2 + (yt - 1) * ysd ^ 2) / (ny + nx -2))
result
cidd <- yv - xv + c(-1, 1) * qt(quantil, df = xv + yv -2) * result * (1 / xp + 1 / yt)
cidd
cidd <- yv - xv + c(-1, 1) * qt(quantil, df = xv + yt -2) * result * ((1 / xp) + (1 / yt)
cidd
cidd <- yv - xv + c(-1, 1) * qt(quantil, df = xv + yt -2) * result * ((1 / xp) + (1 / yt))
cidd
result <- sqrt(((xn - 1) * xsd ^ 2 + (yn - 1) * ysd ^ 2) / (yn + xn -2))
result
cidd <- my - mx + c(-1, 1) * qt(quantil, df = xn + yn - 2) * result * ((1 / xn) + (1 / yn))
cidd
yn = 9
my = -3
ysd = 1.5
xn = 9
mx = 1
xsd = 1.8
quantil = .90
result <- sqrt(((xn - 1) * xsd ^ 2 + (yn - 1) * ysd ^ 2) / (yn + xn -2))
result
cidd <- my - mx + c(-1, 1) * qt(quantil, df = xn + yn - 2) * result * ((1 / xn) + (1 / yn))
cidd
n <- 9
mn <- 1100
sd <- 30
quantile = .975
confid <- mn + c(-1, 1) * qt(quantile, df = n - 1) * sd / sqrt(n)
confid
avgdif = -2
ci =0
above <- ci - avgdif * sqrt(n) / qt(quantile, df = n - 1)
above
nx = 100
ny = 100
y = 4
yv = .5
x = 6
xv = 2
quant = .975
res <- sqrt(((nx - 1) * xv^2 + (ny - 1) * yv^2)/(nx + ny - 2))
res
cii <- x - y + c(-1, 1) * qnorm(quant) * res * (1 / nx + 1 / ny) ^ .5
cii
yn = 9
my = -3
ysd = 1.5
xn = 9
mx = 1
xsd = 1.8
quantil = .95
result <- sqrt(((xn - 1) * xsd ^ 2 + (yn - 1) * ysd ^ 2) / (yn + xn -2))
result
cidd <- my - mx + c(-1, 1) * qt(quantil, df = xn + yn - 2) * result * ((1 / xn) + (1 / yn))
cidd
cidd <- my - mx + c(-1, 1) * qt(quantil, df = yn + xn - 2) * result * ((1 / xn) + (1 / yn)) ^ .5
cidd
lambda = .2
exp_dist <- rexp(n, lambda)
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
rnorm(ex_dist)
lambda = .2
n = 1000
exp_dist <- rexp(n, lambda)
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
rnorm(ex_dist)
lambda = .2
n = 1000
exp_dist <- rexp(n, lambda)
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
rnorm(exp_dist)
lambda = .2
n = 1000
exp_dist <- rexp(n, lambda)
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist
mean_exp_dist
sd_exp_dist
rnorm(exp_dist)
head(rnorm)
lambda = .2
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(40, mean_exp_dist))
}
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist
mean_exp_dist
sd_exp_dist
lambda = .2
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(40, mean_exp_dist))
}
rand_expdist_mean <- mean(exp_dist)
rand_expdist_mean
lambda = .2
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(40, mean_exp_dist))
}
exp_dist
rand_expdist_mean <- mean(exp_dist)
rand_expdist_mean
lambda = .2
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(40, mean_exp_dist))
}
exp_dist
rand_expdist_mean <- mean(exp_dist)
rand_expdist_mean
lambda = .2
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(40, lambda))
}
exp_dist
rand_expdist_mean <- mean(exp_dist)
rand_expdist_mean
lambda = .2
mean_exp_dist <- 1 / lambda
sd_exp_dist <- 1/lambda
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(40, lambda))
}
exp_dist
rand_expdist_mean <- mean(exp_dist)
rand_expdist_mean
mean_exp_dist
cumsum(1000)
var <- (exp_dist - mean_exp_dist) ^ 2
var <- (exp_dist - mean_exp_dist) ^ 2
var
exp_dist_var <- var(exp_dist)
exp_dist_var
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
theo_expdist_mean <- mean(exp_dist)
theo_mean
mean_exp_dist
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
mean_exp_dist <- mean(exp_dist)
theo_mean
mean_exp_dist
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
ggplot(theo_mean, exp_dist_mean + geom_line()+ stat = "smooth")
ggplot(theo_mean + geom_line()+ stat = "smooth")
ggplot(theo_mean) + geom_line()+ stat_smooth()
library(ggplot2)
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
ggplot(theo_mean) + geom_line()+ stat_smooth()
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
ggplot(theo_mean) + geom_line() + stat_smooth()
ggplot(theo_mean, aes(x = mean, y= density)) + geom_line() + stat_smooth()
library(ggplot2)
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
qplot(theo_mean)
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
qplot(theo_mean) + geom_line()
qplot(theo_mean, aes(x = long, y = lat)) + geom_point()
library(ggplot2)
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
qplot(theo_mean, exp_dist_mean, aes(x = long, y = lat)) + geom_point()
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
qplot(theo_mean, exp_dist_mean, aes(x = long, y = lat)) + geom_bar()
qplot(theo_mean, exp_dist_mean, aes(x = long, y = lat)) + geom_line()
qplot(theo_mean, exp_dist_mean, aes(x = long, y = lat))
library(ggplot2)
lambda = .2
theo_mean <- 1 / lambda
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
exp_dist_mean <- mean(exp_dist)
theo_mean
exp_dist_mean
theo_var <- ((sd_exp_dist) ^ 2) / n
exp_dist_var <- var(exp_dist)
theo_var
exp_dist_var
library(ggplot2)
lambda = .2
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
## Theoretical Mean
theo_mean <- 1 / lambda
theo_mean ## Output
## Exponential Distribution Mean
exp_dist_mean <- mean(exp_dist)
exp_dist_mean ## Output
## Theoretical Variance
theo_var <- ((sd_exp_dist) ^ 2) / n
theo_var ## Output
## Exponential Distribution Variance
exp_dist_var <- var(exp_dist)
exp_dist_var ## Output
library(ggplot2)
lambda = .2
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
## Theoretical Mean
theo_mean <- 1 / lambda
theo_mean
## Exponential Distribution Mean
exp_dist_mean <- mean(exp_dist)
exp_dist_mean
## Theoretical Variance
theo_var <- ((sd_exp_dist) ^ 2) / n
theo_var
## Exponential Distribution Variance
exp_dist_var <- var(exp_dist)
exp_dist_var
setwd("~/Coursera/Statistics")
---
title: "Coursera Statistical Inference Course Project"
author: "Brad Tweardy"
date: "Thursday, March 19, 2015"
output: pdf_document
---
Introduction
================================================================================
In this project we will analyze the exponential distribution in R and compare it
with the Central Limit Theorem. We will investigate the distribution of averages
of 40 exponentials.
Simulations
================================================================================
Here we will run the similations and show the code for which we will use to conduct
our analysis. For this project we have set lamda = 0.2 for all simulations. Keep
in mind that the mean of exponential distribution and the standard deviation is
calculated using the formula 1 / lambda. In addition, the exponential distribution
is simulated in R using rexp(n, lambda) where lambda is the rate parameter. Our
sample for this analysis will come from 1,000 simulations.
The first task that we want to accomplish is to set our variables and calculate
the Theoretical Distribution Mean and the mean of 40 exponentials (Exponential
Distribution Mean). The simulation of the sample is done with the following code:
```{r}
lambda = .2
sd_exp_dist <- 1/lambda
n = 40
exp_dist <- rep(NA, 1000)
for (i in 1:1000) {
exp_dist [i] <- mean(rexp(n, lambda))
}
## Theoretical Distribution Mean
theo_mean <- 1 / lambda
## Exponential Distribution Mean
exp_dist_mean <- mean(exp_dist)
## Theoretical Distribution Variance
theo_var <- ((sd_exp_dist) ^ 2) / n
## Exponential Distribution Variance
exp_dist_var <- var(exp_dist)
```
Results
================================================================================
Now that we have simulated the data we, we can review the results.
**Mean Averages of the Distribtutions**
In our analysis of the first set of data, we will look at the output of the calculations for the Theoretical Distribution Mean and the Exponential Distribution Mean. We
will then plot a histogram of the exponential distribtution of the sample of 1,000 simulations and then plot the mean values, represented by vertical lines, of each distribution. We then will comment on out observations as to how the results compare.
*Theoretical Distribution Mean*
```{r}
theo_mean
```
*Exponential Distribution Mean*
```{r}
exp_dist_mean
hist(exp_dist, main = "Theoretical Distribution Mean
vs
Exponential Distribution Mean",
xlab = "Distribution", ylab = "Frequency", "col" = "grey")
abline(v = exp_dist_mean, col = "red", lwd = 4)
abline(v = theo_mean, col = "green", lwd = 4)
legend("topright", c("Theoretical Mean", "Exponential Mean"),
col = c("green", "red"), lwd = 3)
```
*As we can see, based on the calculations of the means, the variance is rather*
*insignificant. This is reflected in the plotted histogram of the exponential values*
*in which the two means are represented by separate vertical lines against the*
*histogram plot. The lines almost directly overlap each other representing*
*a rather insignificant variance in the two mean averages.*
**Distribution Variance**
In our next analysis, our goal is to compare the Distribution Variance of the
Theoretical Distribution and the Exponential Distribution values. We will then
confirm a normal distribution of the samples with a plotted histogram of the
sample of 1,000 Exponential Distributions. We will then plot two density curves
against the histogram to show a normal distribution of the sample set and comment
on our findings.
*Theoretical Distribution Variance*
```{r}
theo_var
```
*Exponential Distribution Variance*
```{r}
exp_dist_var
exp_dist_scale <- scale(exp_dist)
hist(exp_dist_scale, main = "Theoretical Distribution sample
vs
Exponential Distribution Sample",
xlab = "Distribution", ylab = "Frequency", "col" = "gray", prob = TRUE)
lines(density(exp_dist_scale), col = "purple", lwd = 2)
curve(dnorm(x, 0, 1), -3, 3, add = TRUE, col = "orange", lwd = 2)
```
*As we refer to the Distribution Variances, we can see that the variances are again*
*insignificant. We represent this by creating a histogram plot of the sample*
*distributions. We then added separate density lines to represent the variance*
*in the distributions. The density lines overlap relatively nicely representing*
*an insignificant variance.*
